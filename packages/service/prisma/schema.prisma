// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  username  String     @unique
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  properties Property[] @relation("PropertyOwner")
  transfersFrom Transfer[] @relation("TransferFrom")
  transfersTo Transfer[] @relation("TransferTo")
}

model Property {
  id                String     @id @default(uuid())
  propertyId        String     @unique // Identificador único do imóvel
  registrationNumber String    // Número de registro no cartório
  ownerId           String     // ID do usuário proprietário
  owner             User       @relation("PropertyOwner", fields: [ownerId], references: [id])
  description       String     // Descrição do imóvel
  propertyAddress   String     // Endereço físico do imóvel
  area              Float      // Área em m²
  propertyType      String     // Tipo do imóvel (CASA, APARTAMENTO, TERRENO, etc)
  status            String     // Status do imóvel (REGULAR, PENDENTE, BLOQUEADO)
  lastTransferDate  DateTime   // Data da última transferência
  hasMortgage       Boolean    @default(false) // Indica se o imóvel tem hipoteca
  mortgageDetails   String?    // Detalhes da hipoteca, se houver
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  transfers         Transfer[]
}

model Transfer {
  id            String   @id @default(uuid())
  propertyId    String
  property      Property @relation(fields: [propertyId], references: [id])
  fromId        String   // ID do usuário que transferiu
  from          User     @relation("TransferFrom", fields: [fromId], references: [id])
  toId          String   // ID do usuário que recebeu
  to            User     @relation("TransferTo", fields: [toId], references: [id])
  timestamp     DateTime @default(now())
  reason        String   // Motivo da transferência
  documentHash  String   // Hash do documento de transferência
  notaryInfo    String   // Informações do cartório
  transferValue Float    // Valor da transferência
  paymentStatus String   // Status do pagamento
  createdAt     DateTime @default(now())
}
